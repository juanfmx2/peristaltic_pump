(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function (global){
// title      : Anniversary Gift
// author     : Juan F. Mosquera
// license    : GNU GENERAL PUBLIC LICENSE v3
// tags       : anniversary, Anna Kuroshchenkova, Juan Felipe Mosquera Morales
// file       : anniversary_box.coffee
var util;

util = require('./util.coffee');

exports.get_cat_lines = function() {
  var all_lines, lineRadius, line_0, line_1, line_10, line_11, line_12, line_13, line_14, line_15, line_16, line_2, line_3, line_4, line_5, line_6, line_7, line_8, line_9;
  lineRadius = 50;
  all_lines = [];
  line_0 = new CSG.Path2D([[5604.944543222419, -8067.69113538227]], false);
  line_0 = line_0.appendBezier([[5376.69686450484, -8051.816103632206], [5143.157508537239, -7950.568678915135], [4894.801456269579, -7760.068297914373]]);
  line_0 = line_0.appendBezier([[4767.095645302401, -7661.995879547314], [4696.892727118787, -7600.259644963734], [4508.509017018034, -7420.695396946348]]);
  line_0 = line_0.appendBezier([[4326.475319617305, -7246.77560466232], [4270.736319250416, -7197.73939547879], [4176.897242683373, -7127.536477295176]]);
  line_0 = line_0.appendBezier([[3851.2827025654046, -6883.060988344198], [3405.7234781136226, -6718.313436626872], [2637.724719893884, -6558.152005192898]]);
  line_0 = line_0.appendPoint([2539.652301526825, -6537.690853159484]);
  line_0 = line_0.appendPoint([2475.4466175599014, -6578.965935709649]);
  line_0 = line_0.appendBezier([[2077.8652668416444, -6835.788671577343], [1633.3643778398666, -7025.2307171281], [1180.04402675472, -7131.064262128523]]);
  line_0 = line_0.appendBezier([[994.4825445206445, -7174.456015578698], [881.946208336861, -7189.272711878756], [774.348770919764, -7184.686591595405]]);
  line_0 = line_0.appendBezier([[614.1873394857901, -7177.983800412045], [506.9426805520277, -7136.708717861879], [419.4536166850111, -7048.866875511528]]);
  line_0 = line_0.appendBezier([[318.5589704512742, -6947.6194507944565], [267.4060903677363, -6803.685829593881], [253.64772951768123, -6582.846499026331]]);
  line_0 = line_0.appendBezier([[242.3588180509694, -6393.757231958908], [282.928343634465, -5985.945305223943], [347.839584568058, -5640.927948522563]]);
  line_0 = line_0.appendBezier([[420.8647306183501, -5252.518838371009], [525.9927186521039, -4891.273671436231], [681.920808286061, -4494.397877684643]]);
  line_0 = line_0.appendBezier([[748.5959416363277, -4324.358648717297], [769.4098721530776, -4240.397369683627], [764.1181949030564, -4162.786103349984]]);
  line_0 = line_0.appendBezier([[761.6487455197132, -4120.452685349815], [754.945954336353, -4095.405413033048], [735.8959162362769, -4055.188665932887]]);
  line_0 = line_0.appendBezier([[708.7319730195015, -3998.0385516326583], [671.6902322693534, -3951.824570315807], [554.5677758022182, -3829.057658115316]]);
  line_0 = line_0.appendBezier([[512.5871362853836, -3784.607569215138], [462.8453701351847, -3730.985239748257], [444.8536674851127, -3709.818530748172]]);
  line_0 = line_0.appendBezier([[204.61152033415175, -3429.3596364970504], [60.325120650241296, -3066.3505771455984], [16.227810233398245, -2631.7274856771933]]);
  line_0 = line_0.appendBezier([[2.1166709000084665, -2493.4383202099734], [-2.1166709000084665, -2273.304546609093], [6.7027911833601435, -2136.073716591877]]);
  line_0 = line_0.appendBezier([[27.16394321677532, -1820.3369740072812], [64.91124093359298, -1585.3865041063414], [167.56977958400358, -1133.8300454378686]]);
  line_0 = line_0.appendBezier([[206.72819123416022, -962.7324810205175], [210.25597606750767, -945.446335337115], [218.72265966754154, -878.4184235035136]]);
  line_0 = line_0.appendBezier([[230.3643496175881, -788.4599102531538], [244.12271046764315, -754.2403973696836], [286.10334998447775, -713.3180933028532]]);
  line_0 = line_0.appendBezier([[305.50616656788867, -694.268055202777], [309.0339514012361, -692.1513843027685], [355.95348968475713, -672.3957892360229]]);
  line_0 = line_0.appendBezier([[390.8785595348968, -657.5790929359636], [390.5257810515621, -649.4651878192644], [358.42293906810033, -743.6570428696413]]);
  line_0 = line_0.appendBezier([[240.94770411763042, -1085.4993932210086], [156.63364660062652, -1508.4807947393672], [125.58914006716901, -1908.5315948409673]]);
  line_0 = line_0.appendBezier([[115.00578556712668, -2043.6457539581743], [111.83077921711399, -2144.1876217085764], [113.94745011712244, -2291.296249259165]]);
  line_0 = line_0.appendBezier([[116.06412101713092, -2433.465978043067], [118.18079191713937, -2474.741060593232], [128.7641464171817, -2580.574605593655]]);
  line_0 = line_0.appendBezier([[182.38647588406286, -3106.920102729094], [365.83128721812994, -3464.28470634719], [659.3429853526374, -3613.8627832811217]]);
  line_0 = line_0.appendBezier([[871.7156323201534, -3721.8129991815536], [1110.1938870544407, -3719.696328281545], [1400.1778003556005, -3606.454435131092]]);
  line_0 = line_0.appendBezier([[1455.5640222391555, -3584.9349476476727], [1593.1476307397058, -3516.848700364067], [1649.2394095899301, -3483.3347444472665]]);
  line_0 = line_0.appendBezier([[1798.464708040527, -3393.7290096802412], [1924.053848107696, -3297.067705246521], [2035.88462732481, -3185.589704512742]]);
  line_0 = line_0.appendBezier([[2232.7350210255972, -2989.797646261959], [2349.8574774927324, -2779.894448677786], [2390.7797815595627, -2550.588434510202]]);
  line_0 = line_0.appendBezier([[2401.71591454294, -2488.4994214432872], [2405.9492563429567, -2369.965851042813], [2399.246465159597, -2310.346287359241]]);
  line_0 = line_0.appendBezier([[2368.9075155928085, -2042.5874185081702], [2217.2127677588687, -1818.5730815906074], [1991.4345384246321, -1707.447859340163]]);
  line_0 = line_0.appendBezier([[1835.5064487906752, -1630.8949284565235], [1663.7033274066546, -1614.3143397397905], [1479.9057375892528, -1658.0588716732987]]);
  line_0 = line_0.appendBezier([[1189.2162673214234, -1727.5562328902433], [942.9768859537718, -1952.2761267744756], [818.446081336607, -2261.3100781757116]]);
  line_0 = line_0.appendBezier([[784.2265684531368, -2346.3296926593853], [732.7209098862642, -2399.246465159597], [689.6819349194253, -2394.3075663929103]]);
  line_0 = line_0.appendBezier([[649.1124093359297, -2390.074224592893], [634.6484915192052, -2350.915812942737], [646.9957384359212, -2278.9490023424487]]);
  line_0 = line_0.appendBezier([[675.2180171027009, -2115.2597860751275], [803.6293850365478, -1901.828803657607], [957.7935822538311, -1762.834081223718]]);
  line_0 = line_0.appendBezier([[1120.777241554483, -1615.7254536731293], [1302.4581604718765, -1532.4697316061297], [1513.4196935060536, -1508.1280162560324]]);
  line_0 = line_0.appendBezier([[1565.278130556261, -1502.1307820393417], [1607.964327039765, -1500.7196681060027], [1834.448113340671, -1495.7807693393163]]);
  line_0 = line_0.appendBezier([[2021.4207095080856, -1491.5474275392994], [2081.745830158327, -1484.8446363559392], [2173.1154573420254, -1458.7390285891681]]);
  line_0 = line_0.appendBezier([[2331.1602178759913, -1413.2306042389862], [2449.3410097931305, -1333.1498885219992], [2671.944232777354, -1119.7189061044787]]);
  line_0 = line_0.appendBezier([[2897.7224621115906, -903.8184743036152], [2975.686506928569, -842.0822397200349], [3099.1589760957295, -781.4043405864588]]);
  line_0 = line_0.appendBezier([[3200.0536223294666, -732.0153529195946], [3266.0231987130637, -713.670871786188], [3487.2153077639487, -673.8069031693618]]);
  line_0 = line_0.appendBezier([[3602.57387181441, -652.9929726526119], [3686.1823723647444, -635.3540484858747], [3730.6324612649223, -622.3012446024892]]);
  line_0 = line_0.appendBezier([[3900.318911748934, -573.6178139022944], [4009.32746309937, -500.94544633533707], [4086.938729433014, -384.5285468348714]]);
  line_0 = line_0.appendPoint([4109.163773883103, -351.01459091807067]);
  line_0 = line_0.appendPoint([4093.6415206163742, -294.5700335845116]);
  line_0 = line_0.appendBezier([[4085.1748370163405, -263.5255270510541], [4072.4748116162896, -212.72542545085088], [4065.419241949595, -181.68091891739337]]);
  line_0 = line_0.appendBezier([[4058.3636722828996, -150.63641238393586], [4048.485874749527, -114.30022860045719], [4044.25253294951, -100.8946462337369]]);
  line_0 = line_0.appendBezier([[4034.727513899472, -73.0251460502921], [4033.316399966133, -47.27231676685575], [4040.7247481161626, -36.68896226681342]]);
  line_0 = line_0.appendBezier([[4052.0136595828744, -20.81393051674992], [4125.744362599836, 3.1750063500127], [4147.9694070499245, -2.1166709000084665]]);
  line_0 = line_0.appendBezier([[4161.374989416645, -5.291677250021166], [4175.1333502667, -19.402816583410942], [4183.2472553833995, -38.45285468348714]]);
  line_0 = line_0.appendBezier([[4187.127818700082, -47.27231676685575], [4199.475065616797, -92.07518415036829], [4210.411198600174, -137.58360850055033]]);
  line_0 = line_0.appendBezier([[4244.6307114836445, -279.04778031778284], [4287.669686450484, -426.509186351706], [4304.603053650551, -460.3759207518415]]);
  line_0 = line_0.appendBezier([[4317.655857533937, -486.48152851861255], [4390.681003584229, -594.0789659357096], [4425.606073434368, -638.5290548358873]]);
  line_0 = line_0.appendBezier([[4519.797928484745, -758.8265176530352], [4640.095391301893, -876.3017526035052], [4755.453955352355, -962.026924053848]]);
  line_0 = line_0.appendBezier([[4923.729291903028, -1086.5577286710127], [5121.285242570485, -1181.1023622047244], [5302.260604521209, -1223.7885586882285]]);
  line_0 = line_0.appendBezier([[5394.688567154912, -1245.6608246549824], [5461.716478988513, -1253.421951288347], [5552.733327688877, -1253.421951288347]]);
  line_0 = line_0.appendBezier([[5706.8975249061605, -1253.7747297716817], [5839.895013123359, -1222.3774447548894], [5972.539722857223, -1154.6439759546186]]);
  line_0 = line_0.appendBezier([[6237.476363841616, -1019.1770383540766], [6430.093415742386, -746.4792707363192], [6472.074055259221, -446.26478141845166]]);
  line_0 = line_0.appendBezier([[6478.776846442581, -400.4035785849349], [6480.89351734259, -293.8644766178421], [6475.954618575904, -252.94217255101174]]);
  line_0 = line_0.appendPoint([6473.132390709226, -228.95323568424914]);
  line_0 = line_0.appendPoint([6489.360200942623, -221.89766601755423]);
  line_0 = line_0.appendBezier([[6536.279739226145, -201.08373550080432], [6590.25484717636, -215.19487483419408], [6631.8827082098605, -259.29218525103715]]);
  line_0 = line_0.appendBezier([[6662.927214743318, -292.1005842011684], [6672.452233793356, -325.26176163463435], [6672.099455310021, -398.63968616826116]]);
  line_0 = line_0.appendBezier([[6671.393898343352, -516.8204780854005], [6633.999379109869, -653.3457511359467], [6561.679790026246, -803.276606553213]]);
  line_0 = line_0.appendBezier([[6516.171365676064, -897.8212400869245], [6461.843479242513, -983.5464115372674], [6394.462788925577, -1068.9188045042756]]);
  line_0 = line_0.appendBezier([[6352.834927892078, -1121.4827985211525], [6234.301357491603, -1240.3691474049613], [6188.792933141422, -1275.294217255101]]);
  line_0 = line_0.appendBezier([[6170.801230491349, -1289.052578105156], [6156.337312674625, -1301.0470465385374], [6155.98453419129, -1302.1053819885417]]);
  line_0 = line_0.appendBezier([[6155.98453419129, -1304.22205288855], [6524.285270792763, -1955.4511331244883], [6628.7077018598475, -2137.837609008551]]);
  line_0 = line_0.appendBezier([[6745.124601360313, -2341.038015409364], [6809.683063810571, -2437.6993198430837], [6855.544266644089, -2476.152174526571]]);
  line_0 = line_0.appendBezier([[6905.638811277622, -2518.48559252674], [6985.719526994609, -2534.007845793469], [7045.339090678181, -2513.193915276719]]);
  line_0 = line_0.appendBezier([[7134.944825445205, -2481.796630259927], [7216.436655095532, -2374.904749809499], [7235.839471678943, -2263.42674907572]]);
  line_0 = line_0.appendBezier([[7238.308921062286, -2247.904495808991], [7239.36725651229, -2219.682217142212], [7237.956142578952, -2185.8154827420763]]);
  line_0 = line_0.appendBezier([[7235.1339147122735, -2103.9708746084157], [7222.433889312222, -2052.112437558208], [7166.694888945332, -1896.1843479242511]]);
  line_0 = line_0.appendBezier([[7092.964185928371, -1689.8089351734257], [7080.96971749499, -1634.0699348065361], [7077.794711144978, -1488.7251996726213]]);
  line_0 = line_0.appendBezier([[7075.6780402449685, -1393.1222306889058], [7080.264160528321, -1337.0304518386813], [7096.491970761718, -1255.89140067169]]);
  line_0 = line_0.appendBezier([[7129.653148195184, -1088.6743995710212], [7205.500522112155, -919.3407275703439], [7310.275731662574, -779.2876696864504]]);
  line_0 = line_0.appendBezier([[7457.0315807298275, -583.1428329523325], [7663.054214997318, -439.9147687184263], [7878.954646798182, -383.82298986820194]]);
  line_0 = line_0.appendBezier([[7917.054722998334, -373.9451923348291], [7970.324273981881, -375.7090847515028], [7994.6659893319775, -387.35077470154937]]);
  line_0 = line_0.appendBezier([[8030.2966161487875, -404.63692038495185], [8054.991109982219, -441.32588265176526], [8061.3411226822445, -486.1287500352778]]);
  line_0 = line_0.appendBezier([[8065.927242965597, -515.0565856687268], [8062.752236615584, -649.8179663025992], [8055.343888465554, -753.1820619196793]]);
  line_0 = line_0.appendBezier([[8027.474388282109, -1148.9995202212626], [7921.99362176502, -1534.2336240228035], [7743.48770919764, -1890.89267067423]]);
  line_0 = line_0.appendBezier([[7620.01524003048, -2137.837609008551], [7478.551068213247, -2345.6241356927158], [7286.99235176248, -2561.1717890102445]]);
  line_0 = line_0.appendBezier([[7153.994863545282, -2710.3970874608412], [7100.019755595066, -2783.0694550277985], [7057.333559111562, -2867.736291028137]]);
  line_0 = line_0.appendBezier([[6994.186210594643, -2994.0309880619757], [6981.1334067112575, -3112.917336945785], [7011.82513476138, -3280.839895013123]]);
  line_0 = line_0.appendBezier([[7016.764033528067, -3306.945502779894], [7033.344622244799, -3378.5595348968473], [7049.219653994863, -3439.590212513758]]);
  line_0 = line_0.appendBezier([[7113.072559478452, -3689.357378714757], [7132.475376061862, -3789.1936894984897], [7149.761521745265, -3961.7023678491796]]);
  line_0 = line_0.appendBezier([[7158.933762311968, -4050.95532413287], [7158.580983828634, -4301.075268817204], [7149.761521745265, -4386.800440267547]]);
  line_0 = line_0.appendBezier([[7130.005926678519, -4571.656365534953], [7097.903084695057, -4728.642790618914], [7041.458527361498, -4910.323709536307]]);
  line_0 = line_0.appendBezier([[7003.005672678011, -5035.912849603476], [6961.377811644512, -5148.801964270595], [6873.53596929416, -5367.524623938136]]);
  line_0 = line_0.appendBezier([[6739.832924110292, -5699.841955239465], [6698.205063076793, -5816.611633223266], [6660.8105438433095, -5967.248045607202]]);
  line_0 = line_0.appendBezier([[6616.713233426466, -6144.695622724578], [6602.249315609742, -6272.75421217509], [6581.082606609657, -6683.388366776733]]);
  line_0 = line_0.appendBezier([[6562.385346992915, -7042.164084328168], [6536.279739226145, -7217.847769028871], [6473.48516919256, -7404.820365196285]]);
  line_0 = line_0.appendBezier([[6379.646092625518, -7685.632037930742], [6218.073547258205, -7888.832444331554], [6006.053678774024, -7992.549318431969]]);
  line_0 = line_0.appendBezier([[5883.639545056867, -8052.168882115541], [5746.761493522987, -8077.921711398978], [5604.944543222419, -8067.69113538227]]);
  line_0 = line_0.expandToCAG(lineRadius, 10);
  all_lines.push(line_0);
  line_1 = new CSG.Path2D([[5701.958626139474, -7836.974007281347]], false);
  line_1 = line_1.appendBezier([[5771.1032088730835, -7826.743431264639], [5845.539468856715, -7794.993367764512], [5912.567380690316, -7747.721050997657]]);
  line_1 = line_1.appendBezier([[5958.075805040498, -7715.618209014195], [6044.153754974176, -7629.540259080517], [6083.312166624332, -7576.623486580305]]);
  line_1 = line_1.appendBezier([[6323.554313775294, -7254.536731295684], [6441.382327209099, -6733.482911410267], [6376.1183077921705, -6284.748680608472]]);
  line_1 = line_1.appendBezier([[6363.41828239212, -6195.848502808116], [6344.0154658087085, -6116.826122541133], [6311.9126238252475, -6020.164818107413]]);
  line_1 = line_1.appendBezier([[6285.807016058476, -5941.142437840431], [6282.632009708464, -5918.211836423672], [6294.626478141845, -5886.81455140688]]);
  line_1 = line_1.appendBezier([[6298.507041458527, -5877.642310840177], [6319.673750458612, -5845.18669037338], [6342.251573392035, -5814.494962323258]]);
  line_1 = line_1.appendBezier([[6592.371518076369, -5474.769282871898], [6703.849518810148, -5278.271667654446], [6785.694126943808, -5032.385064770129]]);
  line_1 = line_1.appendBezier([[6816.385854993931, -4940.662659103095], [6834.730336127338, -4869.401405469477], [6855.897045127423, -4761.80396805238]]);
  line_1 = line_1.appendBezier([[6880.591538960855, -4637.62594191855], [6906.697146727626, -4445.00889001778], [6922.219399994355, -4268.619648350407]]);
  line_1 = line_1.appendBezier([[6928.216634211046, -4200.886179550136], [6928.216634211046, -3899.9661332655996], [6922.219399994355, -3820.590974515282]]);
  line_1 = line_1.appendBezier([[6907.402703694295, -3627.9739226145116], [6890.822114977563, -3490.743092597296], [6863.305393277453, -3340.459458696695]]);
  line_1 = line_1.appendBezier([[6834.024779160669, -3181.356362712725], [6805.449722010554, -3074.1117037789627], [6765.585753393729, -2973.9226145118955]]);
  line_1 = line_1.appendBezier([[6755.7079558603555, -2949.5808991617982], [6731.366240510258, -2881.494651878192], [6711.610645443512, -2822.2278666779553]]);
  line_1 = line_1.appendBezier([[6653.049417209945, -2647.9552959105918], [6609.304885276437, -2544.943978776846], [6549.685321592865, -2441.932661643101]]);
  line_1 = line_1.appendBezier([[6368.357181158806, -2127.6070329918434], [6084.017723591002, -1875.0176389241665], [5674.4419044393635, -1664.7616628566589]]);
  line_1 = line_1.appendBezier([[5542.502751672169, -1597.028194056388], [5178.082578387379, -1426.9889650890411], [5009.454463353371, -1354.6693760054186]]);
  line_1 = line_1.appendBezier([[4590.706403635029, -1174.3995710213642], [4321.889199333954, -1112.3105579544492], [3993.4524313493066, -1119.366127621144]]);
  line_1 = line_1.appendBezier([[3777.1992210651083, -1124.3050263878304], [3584.582169164338, -1159.582874721305], [3305.534388846555, -1246.0136031383172]]);
  line_1 = line_1.appendBezier([[3025.7810515621027, -1332.4443315553297], [2612.677447577117, -1509.891908672706], [2409.4770411763043, -1631.247706939858]]);
  line_1 = line_1.appendBezier([[2335.393559676008, -1675.3450173567012], [2331.1602178759913, -1697.922840290125], [2389.368667626224, -1744.4896000903111]]);
  line_1 = line_1.appendBezier([[2424.6465159596983, -1773.0646572404255], [2433.465978043067, -1782.9424547737983], [2481.796630259927, -1850.3231450907344]]);
  line_1 = line_1.appendBezier([[2502.9633392600117, -1879.6037592075181], [2528.716168543448, -1915.2343860243275], [2539.2995230434904, -1929.698303841052]]);
  line_1 = line_1.appendBezier([[2575.282928343634, -1978.7345130245815], [2598.919086727062, -2038.7068551914879], [2612.677447577117, -2114.9070075917925]]);
  line_1 = line_1.appendBezier([[2621.144131177151, -2162.884881325318], [2621.144131177151, -2279.654559309118], [2612.677447577117, -2344.2130217593767]]);
  line_1 = line_1.appendBezier([[2597.507972793723, -2456.3965794598253], [2556.232890243558, -2625.377472977168], [2499.0827759433296, -2808.1167273445653]]);
  line_1 = line_1.appendBezier([[2445.813224959783, -2978.155956311912], [2380.90198402619, -3103.745096379081], [2296.587926509186, -3199.7008438461316]]);
  line_1 = line_1.appendBezier([[2285.651793525809, -3212.4008692461825], [2257.782293342364, -3247.325939096322], [2234.4989134422713, -3277.3121101797756]]);
  line_1 = line_1.appendBezier([[2211.5683120255126, -3307.298281263229], [2179.465470042051, -3346.4566929133857], [2162.884881325318, -3363.742838596788]]);
  line_1 = line_1.appendBezier([[2120.904241808483, -3408.5457059803007], [2115.2597860751275, -3417.717946547004], [2117.376456975136, -3438.8846555470886]]);
  line_1 = line_1.appendBezier([[2119.4931278751446, -3462.168035447182], [2134.3098241752036, -3482.276408997262], [2210.1571980921735, -3568.3543589309397]]);
  line_1 = line_1.appendBezier([[2374.904749809499, -3754.26861964835], [2470.507718793215, -3894.6744560155785], [2642.3108401772356, -4203.355628933479]]);
  line_1 = line_1.appendBezier([[2753.0832839443456, -4402.3226935342755], [2792.241695594502, -4485.93119408461], [2834.575113594671, -4612.578669601783]]);
  line_1 = line_1.appendBezier([[2895.2530127282475, -4794.965145485846], [2930.178082578387, -4986.171083453278], [2957.694804278497, -5291.677250021166]]);
  line_1 = line_1.appendBezier([[2973.9226145118955, -5471.594276521886], [2975.3337284452346, -5494.17209945531], [2975.3337284452346, -5595.066745689046]]);
  line_1 = line_1.appendBezier([[2975.686506928569, -5758.050404989698], [2963.339260011853, -5822.961645923291], [2906.1891457116244, -5967.248045607202]]);
  line_1 = line_1.appendBezier([[2867.0307340614677, -6065.320463974261], [2836.339006011345, -6125.292806141168], [2795.7694804278494, -6180.679028024722]]);
  line_1 = line_1.appendBezier([[2768.958315694409, -6217.015211808201], [2759.433296644371, -6235.712471424942], [2756.6110687776927, -6256.173623458358]]);
  line_1 = line_1.appendBezier([[2752.024948494341, -6288.276465441819], [2773.8972144610952, -6324.965427708633], [2815.1722970112605, -6355.304377275421]]);
  line_1 = line_1.appendBezier([[2841.2779047780314, -6374.3544153754965], [2903.3669178449463, -6403.987807975615], [2955.5781333784885, -6421.979510625687]]);
  line_1 = line_1.appendBezier([[3006.7310134620266, -6439.6184347924245], [3201.4647362628057, -6492.535207292636], [3307.298281263229, -6517.229701126068]]);
  line_1 = line_1.appendBezier([[3578.937713430982, -6581.082606609657], [3923.2495131656924, -6635.763271526543], [4053.0719950328785, -6635.763271526543]]);
  line_1 = line_1.appendBezier([[4122.569356249824, -6635.763271526543], [4145.147179183246, -6642.466062709903], [4186.775040216747, -6675.627240143369]]);
  line_1 = line_1.appendBezier([[4231.577907600259, -6710.905088476843], [4272.500211667089, -6763.116304010385], [4363.164281884119, -6899.288798577597]]);
  line_1 = line_1.appendBezier([[4435.1310924844065, -7007.944571444697], [4446.067225467784, -7022.761267744757], [4497.572884034656, -7082.028052944994]]);
  line_1 = line_1.appendBezier([[4729.701126068919, -7348.023029379391], [4914.20427285299, -7506.420568396692], [5175.260350520701, -7662.701436513983]]);
  line_1 = line_1.appendBezier([[5357.2940479214285, -7771.357209381084], [5482.177631021928, -7823.568424914627], [5598.594530522394, -7838.3851212146865]]);
  line_1 = line_1.appendBezier([[5634.577935822538, -7842.971241498038], [5664.564106905991, -7842.618463014703], [5701.958626139474, -7836.974007281347]]);
  line_1 = line_1.expandToCAG(lineRadius, 10);
  all_lines.push(line_1);
  line_2 = new CSG.Path2D([[917.2240566703355, -6515.818587192729]], false);
  line_2 = line_2.appendBezier([[1001.5381141873394, -6508.4102390427], [1103.1383173877457, -6480.89351734259], [1176.8690204047073, -6445.615669009115]]);
  line_2 = line_2.appendBezier([[1234.3719131882708, -6418.098947309005], [1320.4498631219483, -6369.41551660881], [1374.0721925888295, -6333.784889792001]]);
  line_2 = line_2.appendBezier([[1533.8808455394687, -6228.304123274913], [1625.956029689837, -6104.831654107752], [1659.8227640899725, -5951.373013857138]]);
  line_2 = line_2.appendBezier([[1667.583890723337, -5914.684051590325], [1670.7588970733495, -5831.428329523325], [1665.1144413399936, -5797.208816639855]]);
  line_2 = line_2.appendBezier([[1651.7088589732734, -5711.483645189512], [1599.497643439731, -5608.119549572432], [1524.003048006096, -5517.4554793554025]]);
  line_2 = line_2.appendBezier([[1428.0473005390454, -5402.449693788276], [1248.1302740383258, -5254.635509271018], [1168.4023368046735, -5225.707673637569]]);
  line_2 = line_2.appendBezier([[1089.7327350210255, -5197.1326164874545], [1024.115937120763, -5226.766009087573], [952.8546834871447, -5323.074535037958]]);
  line_2 = line_2.appendBezier([[910.5212654869754, -5380.577427821522], [833.2627776366663, -5516.7499223887335], [786.3432393531453, -5616.939011655801]]);
  line_2 = line_2.appendBezier([[717.1986566195354, -5764.753196173058], [688.2708209860864, -5856.828380323427], [636.7651624192137, -6089.6621793243585]]);
  line_2 = line_2.appendBezier([[609.6012192024383, -6213.840205458188], [605.3678774024214, -6244.179155024976], [607.8373267857646, -6297.095927525188]]);
  line_2 = line_2.appendBezier([[613.8345610024553, -6435.737871475742], [703.4402957694804, -6512.996359326052], [864.3072841701238, -6518.993593542742]]);
  line_2 = line_2.appendBezier([[871.010075353484, -6518.993593542742], [894.9990122202465, -6517.582479609403], [917.2240566703355, -6515.818587192729]]);
  line_2 = line_2.expandToCAG(lineRadius, 10);
  all_lines.push(line_2);
  line_3 = new CSG.Path2D([[5589.775068439025, -7459.501030113171]], false);
  line_3 = line_3.appendBezier([[5473.710947421894, -7441.509327463099], [5354.47182005475, -7384.711991646205], [5231.70490785426, -7289.814579629158]]);
  line_3 = line_3.appendBezier([[5185.490926537408, -7254.183952812349], [5067.310134620268, -7138.1198317952185], [5023.918381170095, -7085.555837778342]]);
  line_3 = line_3.appendBezier([[4947.718228769791, -6993.480653627973], [4862.345835802782, -6870.360962944147], [4832.006886235994, -6808.271949877232]]);
  line_3 = line_3.appendBezier([[4802.72627211921, -6747.946829226991], [4796.02348093585, -6723.6051138768935], [4796.02348093585, -6674.568904693364]]);
  line_3 = line_3.appendBezier([[4796.376259419185, -6622.357689159822], [4803.43182908588, -6602.954872576412], [4834.123557136003, -6570.14647362628]]);
  line_3 = line_3.appendBezier([[4862.345835802782, -6539.807524059492], [4898.682019586261, -6517.935258092738], [4974.8821719865655, -6485.832416109276]]);
  line_3 = line_3.appendBezier([[5009.454463353371, -6471.0157198092165], [5136.454717353879, -6409.632263708972], [5257.457737137696, -6348.954364575396]]);
  line_3 = line_3.appendBezier([[5378.107978438178, -6288.276465441819], [5493.46654248864, -6232.53746507493], [5513.927694522055, -6225.1291169249]]);
  line_3 = line_3.appendBezier([[5647.983518189258, -6176.445686224705], [5751.347613806338, -6175.740129258035], [5832.133886489994, -6223.365224508226]]);
  line_3 = line_3.appendBezier([[5922.445178223689, -6276.634775491772], [5978.184178590579, -6383.879434425535], [6004.99534332402, -6555.682555809555]]);
  line_3 = line_3.appendBezier([[6011.698134507379, -6599.427087743064], [6012.756469957384, -6620.593796743148], [6012.756469957384, -6720.430107526881]]);
  line_3 = line_3.appendBezier([[6013.109248440718, -6868.244292044139], [6008.875906640702, -6905.638811277622], [5968.659159540541, -7092.611407445036]]);
  line_3 = line_3.appendBezier([[5940.789659357096, -7222.786667795557], [5932.322975757062, -7255.595066745688], [5917.153500973668, -7293.69514294584]]);
  line_3 = line_3.appendBezier([[5883.992323540202, -7376.245308046171], [5839.18945615669, -7424.2231817796965], [5772.514322806423, -7446.80100471312]]);
  line_3 = line_3.appendBezier([[5721.361442722885, -7464.087150396523], [5650.100189089267, -7469.026049163209], [5589.775068439025, -7459.501030113171]]);
  line_3 = line_3.expandToCAG(lineRadius, 10);
  all_lines.push(line_3);
  line_4 = new CSG.Path2D([[5585.894505122343, -7263.3561933790525]], false);
  line_4 = line_4.appendBezier([[5608.472328055766, -7257.006180679027], [5628.933480089182, -7234.7811362289385], [5647.983518189258, -7194.917167612112]]);
  line_4 = line_4.appendBezier([[5670.561341122681, -7148.350407811926], [5685.378037422741, -7097.903084695057], [5715.364208506194, -6965.611153444528]]);
  line_4 = line_4.appendBezier([[5755.580955606355, -6789.2219117771565], [5768.63375948974, -6697.852284593458], [5774.983772189766, -6558.504783676233]]);
  line_4 = line_4.appendBezier([[5780.981006406457, -6422.332289109022], [5774.630993706432, -6399.401687692263], [5729.828126322919, -6399.401687692263]]);
  line_4 = line_4.appendBezier([[5670.561341122681, -6399.401687692263], [5439.138656055089, -6503.824118759348], [5309.316174187903, -6588.843733243021]]);
  line_4 = line_4.appendBezier([[5257.457737137696, -6623.063246126491], [5141.393616120565, -6712.668980893517], [5120.93246408715, -6734.541246860271]]);
  line_4 = line_4.appendBezier([[5099.41297660373, -6757.824626760364], [5089.535179070358, -6777.933000310444], [5089.535179070358, -6800.510823243868]]);
  line_4 = line_4.appendBezier([[5089.535179070358, -6829.085880393983], [5107.52688172043, -6861.894279344114], [5165.029774503993, -6937.741653261083]]);
  line_4 = line_4.appendBezier([[5277.918889171111, -7086.966951711681], [5339.655123754692, -7156.11153444529], [5401.038579854937, -7202.6782942454765]]);
  line_4 = line_4.appendBezier([[5464.891485338526, -7251.361724945671], [5540.386080772161, -7276.056218779104], [5585.894505122343, -7263.3561933790525]]);
  line_4 = line_4.expandToCAG(lineRadius, 10);
  all_lines.push(line_4);
  line_5 = new CSG.Path2D([[5655.039087855953, -4477.817288967911]], false);
  line_5 = line_5.appendBezier([[5611.6473344057795, -4470.761719301216], [5574.605593655631, -4452.064459684474], [5503.344340022013, -4402.67547201761]]);
  line_5 = line_5.appendBezier([[5473.358168938559, -4381.861541500861], [5431.02475093839, -4354.34481980075], [5409.858041938305, -4341.6447944006995]]);
  line_5 = line_5.appendBezier([[5249.343832020997, -4246.7473823836535], [5182.66869867073, -4130.683261366522], [5230.2937939209205, -4029.7886151327853]]);
  line_5 = line_5.appendBezier([[5262.3966359043825, -3962.407924815849], [5345.299579488047, -3934.1856461490697], [5387.280219004882, -3976.166285665904]]);
  line_5 = line_5.appendBezier([[5401.391358338272, -3990.277424999294], [5422.5580673383565, -4031.1997290661243], [5437.72754212175, -4074.591482516298]]);
  line_5 = line_5.appendBezier([[5443.019219371771, -4089.0554003330226], [5455.366466288488, -4117.6304574831365], [5465.244263821861, -4138.091609516552]]);
  line_5 = line_5.appendBezier([[5480.766517088589, -4170.547229983348], [5486.76375130528, -4179.013913583382], [5513.57491603872, -4205.119521350153]]);
  line_5 = line_5.appendBezier([[5537.916631388818, -4229.108458216916], [5550.969435272204, -4238.633477266954], [5579.1917139389825, -4253.450173567014]]);
  line_5 = line_5.appendBezier([[5621.525131939152, -4274.9696610504325], [5645.86684728925, -4282.730787683797], [5673.383568989359, -4282.730787683797]]);
  line_5 = line_5.appendBezier([[5706.8975249061605, -4282.730787683797], [5735.825360539609, -4267.561312900403], [5787.331019106482, -4222.758445516891]]);
  line_5 = line_5.appendBezier([[5801.089379956537, -4211.116755566844], [5823.667202889961, -4195.594502300115], [5838.131120706686, -4188.186154150086]]);
  line_5 = line_5.appendBezier([[5862.472836056782, -4176.191685716704], [5867.0589563401345, -4175.1333502667], [5894.575678040244, -4175.1333502667]]);
  line_5 = line_5.appendBezier([[5945.375779640448, -4175.1333502667], [5980.300849490587, -4193.125052916772], [5997.234216690655, -4228.050122766912]]);
  line_5 = line_5.appendBezier([[6008.875906640702, -4252.039059633675], [6006.406457257358, -4287.316907967149], [5990.884203990629, -4318.714192983941]]);
  line_5 = line_5.appendBezier([[5962.6619253238505, -4376.217085767505], [5885.403437473541, -4430.897750684389], [5787.683797589817, -4462.647814184516]]);
  line_5 = line_5.appendBezier([[5737.589252956283, -4478.875624417915], [5691.728050122766, -4484.167301667936], [5655.039087855953, -4477.817288967911]]);
  line_5 = line_5.expandToCAG(lineRadius, 10);
  all_lines.push(line_5);
  line_6 = new CSG.Path2D([[6290.040357858493, -3856.2216013320913]], false);
  line_6 = line_6.appendBezier([[6211.370756074845, -3839.2882341320233], [6007.464792707363, -3771.5547653317526], [5951.020235373803, -3742.979708181638]]);
  line_6 = line_6.appendBezier([[5926.325741540371, -3730.2796827815873], [5906.570146473626, -3712.6407586148503], [5901.984026190274, -3698.5296192814603]]);
  line_6 = line_6.appendBezier([[5889.989557756892, -3662.5462139813167], [5913.272937656986, -3607.5127705810964], [5950.667456890469, -3583.8766121976687]]);
  line_6 = line_6.appendBezier([[5964.425817740524, -3575.0571501143], [5970.423051957215, -3573.646036180961], [5990.17864702396, -3573.646036180961]]);
  line_6 = line_6.appendBezier([[6019.812039624078, -3573.646036180961], [6043.448198007506, -3581.75994129766], [6088.6038438743535, -3606.807213614427]]);
  line_6 = line_6.appendBezier([[6147.517850591256, -3639.968391047893], [6160.217875991307, -3644.2017328479096], [6231.83190810826, -3653.0211949312784]]);
  line_6 = line_6.appendBezier([[6257.231958908362, -3656.196201281291], [6286.512573025146, -3661.1351000479776], [6297.095927525188, -3663.9573279146553]]);
  line_6 = line_6.appendBezier([[6322.49597832529, -3671.0128975813504], [6391.993339542234, -3707.349081364829], [6397.63779527559, -3716.5213219315324]]);
  line_6 = line_6.appendBezier([[6403.987807975615, -3726.75189794824], [6409.985042192306, -3765.204752631727], [6409.985042192306, -3797.307594615189]]);
  line_6 = line_6.appendBezier([[6409.985042192306, -3829.4104365986504], [6403.63502949228, -3846.3438037987185], [6387.407219258882, -3856.2216013320913]]);
  line_6 = line_6.appendBezier([[6373.296079925492, -3865.0410634154596], [6331.315440408658, -3864.688284932125], [6290.040357858493, -3856.2216013320913]]);
  line_6 = line_6.expandToCAG(lineRadius, 10);
  all_lines.push(line_6);
  line_7 = new CSG.Path2D([[3100.9228685124035, -3696.7657268647868]], false);
  line_7 = line_7.appendBezier([[3044.1255326955097, -3689.357378714757], [2978.508734795247, -3662.5462139813167], [2930.8836395450567, -3626.5628086811726]]);
  line_7 = line_7.appendBezier([[2881.1418733948576, -3588.815510964355], [2827.8723224113114, -3521.4348206474187], [2783.775011994468, -3440.2957694804277]]);
  line_7 = line_7.appendBezier([[2759.0805181610363, -3394.4345666469108], [2751.6721700110065, -3372.9150791634916], [2751.6721700110065, -3346.8094713967203]]);
  line_7 = line_7.appendBezier([[2751.6721700110065, -3306.2399458132245], [2772.486100527756, -3277.6648886631106], [2816.936189427934, -3257.55651511303]]);
  line_7 = line_7.appendBezier([[2839.1612338780233, -3247.325939096322], [2858.564050461434, -3247.678717579657], [2884.669658228205, -3258.2620720796995]]);
  line_7 = line_7.appendBezier([[2910.0697090283065, -3268.845426579742], [2919.9475065616793, -3279.428781079784], [2936.8808737617474, -3314.7066294132587]]);
  line_7 = line_7.appendBezier([[2945.7003358451157, -3333.40388903], [2961.928146078514, -3360.92061073011], [2973.217057545226, -3375.3845285468346]]);
  line_7 = line_7.appendBezier([[3036.71718454548, -3460.404143030508], [3103.745096379081, -3508.734795247368], [3176.417463946039, -3522.845934580758]]);
  line_7 = line_7.appendBezier([[3203.5814071628142, -3528.137611830779], [3212.048090762848, -3528.4903903141135], [3241.6814833629664, -3524.9626054807663]]);
  line_7 = line_7.appendBezier([[3273.784325346428, -3520.729263680749], [3288.248243163153, -3516.495921880732], [3377.8539779301777, -3483.687522930601]]);
  line_7 = line_7.appendBezier([[3409.25126294697, -3472.398611463889], [3415.6012756469954, -3471.340276013885], [3435.356870713741, -3473.1041684305587]]);
  line_7 = line_7.appendBezier([[3481.218073547258, -3477.337510230576], [3516.495921880732, -3496.387548330652], [3528.4903903141135, -3523.5514915474273]]);
  line_7 = line_7.appendBezier([[3536.9570739141477, -3542.248751164169], [3535.5459599808087, -3556.007112014224], [3522.845934580758, -3582.1127197809947]]);
  line_7 = line_7.appendBezier([[3510.498687664042, -3607.5127705810964], [3495.6819913639824, -3623.7405808144945], [3471.340276013885, -3640.3211695312275]]);
  line_7 = line_7.appendBezier([[3444.17633279711, -3658.3128721812996], [3419.4818389636775, -3667.485112748003], [3369.7400728134785, -3678.068467248045]]);
  line_7 = line_7.appendBezier([[3277.6648886631106, -3697.824062314791], [3167.59800186267, -3705.2324104648205], [3100.9228685124035, -3696.7657268647868]]);
  line_7 = line_7.expandToCAG(lineRadius, 10);
  all_lines.push(line_7);
  line_8 = new CSG.Path2D([[6457.610137442496, -3511.557023114046]], false);
  line_8 = line_8.appendBezier([[6445.96844749245, -3508.734795247368], [6399.401687692263, -3496.387548330652], [6353.540484858747, -3483.687522930601]]);
  line_8 = line_8.appendBezier([[6308.032060508564, -3471.340276013885], [6242.415262608302, -3453.7013518471476], [6207.842971241497, -3444.8818897637793]]);
  line_8 = line_8.appendBezier([[6173.270679874692, -3436.0624276804106], [6137.992831541218, -3425.4790731803682], [6129.878926424519, -3421.9512883470206]]);
  line_8 = line_8.appendBezier([[6095.659413541049, -3407.487370530296], [6071.317698190951, -3373.267857646826], [6071.317698190951, -3340.10668021336]]);
  line_8 = line_8.appendBezier([[6071.317698190951, -3318.587192729941], [6078.020489374311, -3311.5316230632457], [6108.359438941099, -3302.3593824965424]]);
  line_8 = line_8.appendBezier([[6143.990065757908, -3291.4232495131655], [6163.39288234132, -3292.4815849631696], [6209.606863658171, -3309.4149521632376]]);
  line_8 = line_8.appendBezier([[6330.609883441988, -3352.806705613411], [6315.440408658595, -3348.926142296729], [6367.651624192136, -3350.337256230068]]);
  line_8 = line_8.appendBezier([[6466.782378009199, -3352.453927130076], [6532.046397426127, -3361.6261676967797], [6550.743657042869, -3375.0317500634997]]);
  line_8 = line_8.appendBezier([[6571.557587559619, -3390.906781813563], [6574.732593909632, -3440.648547963762], [6556.388112776225, -3474.162503880563]]);
  line_8 = line_8.appendBezier([[6534.5158468094705, -3514.379250980724], [6509.115796009369, -3523.904270030762], [6457.610137442496, -3511.557023114046]]);
  line_8 = line_8.expandToCAG(lineRadius, 10);
  all_lines.push(line_8);
  line_9 = new CSG.Path2D([[4603.759207518415, -3459.345807580504]], false);
  line_9 = line_9.appendBezier([[4464.058928117855, -3439.237434030423], [4343.055908334039, -3379.6178703468513], [4248.511274800327, -3283.662122879801]]);
  line_9 = line_9.appendBezier([[4163.491660316654, -3198.289729912793], [4129.977704399853, -3117.1506787458015], [4152.202748849942, -3051.1811023622045]]);
  line_9 = line_9.appendBezier([[4161.72776789998, -3022.958823695425], [4172.311122400022, -3006.7310134620266], [4193.830609883442, -2987.3281968786155]]);
  line_9 = line_9.appendBezier([[4236.516806366945, -2949.2281206784633], [4282.025230717128, -2933.7058674117347], [4445.00889001778, -2903.014139361612]]);
  line_9 = line_9.appendBezier([[4517.328479101402, -2889.255778511557], [4556.486890751559, -2873.0279682781584], [4568.834137668275, -2851.508480794739]]);
  line_9 = line_9.appendBezier([[4572.009144018288, -2845.864025061383], [4575.536928851635, -2829.636214827985], [4576.948042784974, -2814.8195185279255]]);
  line_9 = line_9.appendBezier([[4578.359156718313, -2800.0028222278665], [4584.709169418338, -2754.1416193943496], [4591.411960601698, -2712.51375836085]]);
  line_9 = line_9.appendBezier([[4617.517568368469, -2551.6467699602063], [4616.459232918465, -2499.788332909999], [4585.767504868342, -2408.0659272429652]]);
  line_9 = line_9.appendBezier([[4557.192447718228, -2322.693534275957], [4528.264612084779, -2274.0101035757625], [4485.578415601275, -2240.8489261422965]]);
  line_9 = line_9.appendBezier([[4397.736573250924, -2172.0571218920213], [4278.4974458837805, -2163.5904382919875], [4160.669432449976, -2217.2127677588687]]);
  line_9 = line_9.appendBezier([[4110.222109333107, -2240.143369175627], [4074.238704032963, -2265.8961984590633], [4017.7941466994043, -2319.8713064092794]]);
  line_9 = line_9.appendBezier([[3972.638500832557, -2362.9102813761183], [3955.705133632489, -2372.0825219428216], [3926.4245195157055, -2369.965851042813]]);
  line_9 = line_9.appendBezier([[3899.26057629893, -2367.8491801428045], [3883.0327660655316, -2355.5019332260886], [3867.510512798803, -2324.457426692631]]);
  line_9 = line_9.appendBezier([[3845.285468348714, -2280.7128947591227], [3844.5799113820444, -2224.2683374255635], [3866.099398865464, -2178.054356108712]]);
  line_9 = line_9.appendBezier([[3877.7410888155105, -2152.65430530861], [3912.3133801823155, -2114.554229108458], [3941.2412158157645, -2095.151412525047]]);
  line_9 = line_9.appendBezier([[4031.905286032794, -2033.4151779414667], [4174.075014816696, -1999.5484435413314], [4320.83086388395, -2004.8401207913525]]);
  line_9 = line_9.appendBezier([[4416.433832867665, -2008.3679056247], [4478.52284593458, -2021.7734879914203], [4543.786865351508, -2053.876329974882]]);
  line_9 = line_9.appendBezier([[4595.9980808850505, -2079.6291592583184], [4623.51480258516, -2107.4986594417633], [4651.384302768605, -2161.826545875314]]);
  line_9 = line_9.appendBezier([[4708.887195552168, -2275.0684390257666], [4766.037309852397, -2331.512996359326], [4826.009652019304, -2334.6880027093384]]);
  line_9 = line_9.appendBezier([[4845.412468602714, -2335.746338159343], [4853.173595236079, -2334.335224226004], [4876.456975136172, -2324.8102051759656]]);
  line_9 = line_9.appendBezier([[4913.1459374029855, -2310.346287359241], [4943.1321084864385, -2307.1712810092286], [5060.607343436908, -2307.1712810092286]]);
  line_9 = line_9.appendBezier([[5156.563090903959, -2307.1712810092286], [5244.757711737645, -2311.404622809245], [5296.968927271188, -2318.1074139926054]]);
  line_9 = line_9.appendBezier([[5351.649592188072, -2325.515762142635], [5378.107978438178, -2339.626901476025], [5435.258092738407, -2392.5436739762367]]);
  line_9 = line_9.appendBezier([[5454.3081308384835, -2410.182598142974], [5492.055428555301, -2443.34377557644], [5519.219371772077, -2465.9215985098635]]);
  line_9 = line_9.appendBezier([[5614.116783789123, -2544.943978776846], [5616.233454689131, -2549.5300990601977], [5632.814043405864, -2681.1164733440573]]);
  line_9 = line_9.appendBezier([[5641.633505489232, -2751.3193915276715], [5641.633505489232, -2826.813986961307], [5632.461264922529, -2843.39457567804]]);
  line_9 = line_9.appendBezier([[5618.702904072475, -2869.5001834448112], [5598.594530522394, -2884.31687974487], [5566.844467022267, -2892.0780063782345]]);
  line_9 = line_9.appendBezier([[5497.347105805322, -2908.305816611633], [5432.435864871729, -2893.8418987949085], [5411.621934354979, -2857.152936528095]]);
  line_9 = line_9.appendBezier([[5403.860807721615, -2843.0417971947054], [5402.802472271611, -2836.339006011345], [5400.685801371602, -2781.6583410944595]]);
  line_9 = line_9.appendBezier([[5398.216351988259, -2720.627663477549], [5390.10244687156, -2668.416447944007], [5375.99130753817, -2622.9080235938245]]);
  line_9 = line_9.appendBezier([[5351.649592188072, -2543.885643326842], [5257.104958654361, -2496.2605480766515], [5124.107470437162, -2496.613326559986]]);
  line_9 = line_9.appendBezier([[4986.523861936612, -2496.613326559986], [4869.754183952812, -2550.9412129935367], [4829.537436852651, -2633.1385996105323]]);
  line_9 = line_9.appendBezier([[4803.079050602545, -2686.7609290774135], [4793.906810035842, -2811.997290661248], [4810.13462026924, -2891.0196709282304]]);
  line_9 = line_9.appendBezier([[4822.481867185956, -2949.933677645133], [4840.120791352693, -2991.5615386786326], [4895.154234752914, -3088.928400079022]]);
  line_9 = line_9.appendBezier([[4931.843197019727, -3154.1924194959497], [4962.182146586515, -3218.0453249795387], [4970.648830186548, -3249.089831512996]]);
  line_9 = line_9.appendBezier([[4984.407191036604, -3299.5371546298643], [4978.762735303248, -3346.4566929133857], [4954.773798436485, -3377.8539779301777]]);
  line_9 = line_9.appendBezier([[4941.01543758643, -3395.492902096915], [4905.032032286286, -3420.540174413682], [4875.045861202833, -3433.2401998137325]]);
  line_9 = line_9.appendBezier([[4826.362430502639, -3453.7013518471476], [4782.61789856913, -3461.1096999971774], [4706.06496768549, -3462.5208139305164]]);
  line_9 = line_9.appendBezier([[4660.203764851974, -3463.5791493805204], [4625.9842519685035, -3462.5208139305164], [4603.759207518415, -3459.345807580504]]);
  line_9 = line_9.expandToCAG(lineRadius, 10);
  all_lines.push(line_9);
  line_10 = new CSG.Path2D([[6218.779104224875, -2995.08932351198]], false);
  line_10 = line_10.appendBezier([[6184.2068128580695, -2990.855981711963], [6172.212344424688, -2985.917082945277], [6157.748426607964, -2970.0420511952134]]);
  line_10 = line_10.appendBezier([[6134.112268224536, -2943.936443428442], [6131.995597324528, -2921.3586204950184], [6149.987299974599, -2885.7279936782093]]);
  line_10 = line_10.appendBezier([[6171.859565941353, -2841.983461744701], [6198.670730674794, -2831.047328761324], [6257.937515875031, -2841.2779047780314]]);
  line_10 = line_10.appendBezier([[6300.2709338752, -2848.686252928061], [6336.254339175344, -2848.686252928061], [6360.948833008776, -2841.2779047780314]]);
  line_10 = line_10.appendBezier([[6371.532187508818, -2838.1028984280188], [6401.871137075607, -2824.344537577964], [6428.682301809047, -2810.233398244574]]);
  line_10 = line_10.appendBezier([[6474.19072615923, -2786.9500183444807], [6479.129624925916, -2785.186125927807], [6499.237998475996, -2785.186125927807]]);
  line_10 = line_10.appendBezier([[6516.876922642734, -2785.538904411142], [6524.990827759432, -2787.65557531115], [6542.276973442835, -2796.827815877854]]);
  line_10 = line_10.appendBezier([[6563.443682442919, -2808.1167273445653], [6611.06877769311, -2851.8612592780737], [6620.241018259813, -2868.089069511472]]);
  line_10 = line_10.appendBezier([[6626.591030959839, -2879.7307594615186], [6626.238252476504, -2897.7224621115906], [6619.888239776479, -2910.4224875116415]]);
  line_10 = line_10.appendBezier([[6597.3104168430555, -2954.16701944515], [6455.140688059153, -2992.9726526119716], [6304.151497191882, -2996.8532159286538]]);
  line_10 = line_10.appendBezier([[6270.284762791747, -2997.5587728953233], [6231.83190810826, -2996.8532159286538], [6218.779104224875, -2995.08932351198]]);
  line_10 = line_10.expandToCAG(lineRadius, 10);
  all_lines.push(line_10);
  line_11 = new CSG.Path2D([[3062.1172353455813, -2909.364152061637]], false);
  line_11 = line_11.appendBezier([[2881.1418733948576, -2845.864025061383], [2712.8665368441843, -2718.1582140942055], [2712.8665368441843, -2643.7219541105746]]);
  line_11 = line_11.appendBezier([[2712.8665368441843, -2635.6080489938754], [2713.924872294189, -2626.0830299438376], [2714.983207744193, -2622.9080235938245]]);
  line_11 = line_11.appendBezier([[2722.038777410888, -2604.916320943753], [2769.3110941777436, -2600.682979143736], [2810.586176727909, -2614.088561510456]]);
  line_11 = line_11.appendBezier([[2862.444613778116, -2631.3747071938587], [3061.411678378912, -2714.983207744193], [3125.264583862501, -2746.73327124432]]);
  line_11 = line_11.appendBezier([[3167.59800186267, -2767.8999802444046], [3180.298027262721, -2791.5361386278328], [3177.8285778793775, -2844.805689611379]]);
  line_11 = line_11.appendBezier([[3174.653571529365, -2917.1252786950017], [3140.0812801625602, -2936.5280952784124], [3062.1172353455813, -2909.364152061637]]);
  line_11 = line_11.expandToCAG(lineRadius, 10);
  all_lines.push(line_11);
  line_12 = new CSG.Path2D([[3041.656083312166, -2506.491124093359]], false);
  line_12 = line_12.appendBezier([[2881.494651878192, -2477.56328845991], [2756.6110687776927, -2357.265825642762], [2788.3611322778197, -2262.368413625716]]);
  line_12 = line_12.appendBezier([[2796.1222589111844, -2239.085033725623], [2817.288967911269, -2212.273868992182], [2836.339006011345, -2202.0432929754747]]);
  line_12 = line_12.appendBezier([[2857.152936528095, -2191.1071599920974], [2873.0279682781584, -2193.223830892106], [2911.128044478311, -2212.273868992182]]);
  line_12 = line_12.appendBezier([[2935.4697598284083, -2224.6211159088984], [2946.405892811785, -2233.4405779922668], [2976.039285411904, -2263.42674907572]]);
  line_12 = line_12.appendBezier([[3003.556007112014, -2291.296249259165], [3014.1393616120563, -2300.1157113425334], [3023.6643806620946, -2301.8796037592074]]);
  line_12 = line_12.appendBezier([[3030.3671718454543, -2302.9379392092114], [3066.703355628933, -2304.3490531425505], [3104.4506533457507, -2304.7018316258855]]);
  line_12 = line_12.appendBezier([[3166.8924448960006, -2305.4073885925545], [3175.0063500127, -2306.465724042559], [3194.056388112776, -2313.8740721925888]]);
  line_12 = line_12.appendBezier([[3245.5620466796486, -2334.335224226004], [3262.1426353963816, -2380.5492055428554], [3236.3898061129453, -2433.465978043067]]);
  line_12 = line_12.appendBezier([[3225.453673129568, -2456.0438009764907], [3198.995286879462, -2483.5605226766006], [3178.886913329382, -2494.143877176643]]);
  line_12 = line_12.appendBezier([[3145.725735895916, -2510.724465893376], [3092.4561849123697, -2515.6633646600626], [3041.656083312166, -2506.491124093359]]);
  line_12 = line_12.expandToCAG(lineRadius, 10);
  all_lines.push(line_12);
  line_13 = new CSG.Path2D([[3142.5507295459033, -2111.73200124178]], false);
  line_13 = line_13.appendBezier([[3109.0367736291023, -2102.5597606750766], [3076.2283746789712, -2076.101374424971], [3020.136595828747, -2012.6012474247168]]);
  line_13 = line_13.appendBezier([[2999.675443795332, -1989.3178675246238], [2972.1587220952215, -1958.9789179578356], [2959.105918211836, -1944.867778624446]]);
  line_13 = line_13.appendBezier([[2917.8308356616712, -1900.7704682076028], [2905.483588744955, -1863.37594897412], [2920.653063528349, -1828.803657607315]]);
  line_13 = line_13.appendBezier([[2930.5308610617217, -1806.578613157226], [2939.703101628425, -1797.053594107188], [2961.575367595179, -1786.117461123811]]);
  line_13 = line_13.appendBezier([[3022.958823695425, -1754.7201761070187], [3118.209014195806, -1791.7619168571669], [3164.0702170293225, -1864.4342844241241]]);
  line_13 = line_13.appendBezier([[3187.000818446081, -1900.7704682076028], [3199.348065362797, -1908.1788163576325], [3259.6731860130385, -1920.8788417576834]]);
  line_13 = line_13.appendBezier([[3333.40388903, -1936.0483165410774], [3359.8622752801057, -1952.9816837411452], [3369.387294330144, -1990.7289814579626]]);
  line_13 = line_13.appendBezier([[3374.32619309683, -2010.4845765247085], [3371.5039652301525, -2039.7651906414922], [3363.742838596788, -2051.7596590748735]]);
  line_13 = line_13.appendBezier([[3348.926142296729, -2074.3374820082972], [3295.656591313182, -2096.2097479750514], [3225.806451612903, -2107.851437925098]]);
  line_13 = line_13.appendBezier([[3167.9507803460046, -2117.7292354584706], [3165.4813309626616, -2117.7292354584706], [3142.5507295459033, -2111.73200124178]]);
  line_13 = line_13.expandToCAG(lineRadius, 10);
  all_lines.push(line_13);
  line_14 = new CSG.Path2D([[1901.4760251742723, -2829.28343634465]], false);
  line_14 = line_14.appendBezier([[1894.7732339909123, -2827.5195439279764], [1884.5426579742048, -2821.169531227951], [1878.8982022408488, -2814.8195185279255]]);
  line_14 = line_14.appendBezier([[1869.0204047074758, -2803.8833855445487], [1869.0204047074758, -2802.825050094544], [1870.4315186408148, -2773.1916574944257]]);
  line_14 = line_14.appendBezier([[1874.6648604408317, -2704.3998532441506], [1914.1760505743232, -2629.25803629385], [1982.6150763412636, -2561.1717890102445]]);
  line_14 = line_14.appendBezier([[2012.6012474247168, -2530.8328394434566], [2044.3513109248438, -2505.78556712669], [2066.223576891598, -2494.496655659978]]);
  line_14 = line_14.appendBezier([[2085.9791719583436, -2484.618858126605], [2115.965343041797, -2484.618858126605], [2136.426495075212, -2494.143877176643]]);
  line_14 = line_14.appendBezier([[2169.587672508678, -2510.3716874100414], [2194.9877233087796, -2553.763440860215], [2188.990489092089, -2585.1607258770073]]);
  line_14 = line_14.appendBezier([[2180.87658397539, -2628.5524793271807], [2103.265317641746, -2736.855473710947], [2049.2902096915304, -2780.247227161121]]);
  line_14 = line_14.appendBezier([[2002.3706714080092, -2817.9945248779386], [1939.5761013744248, -2838.8084553946883], [1901.4760251742723, -2829.28343634465]]);
  line_14 = line_14.expandToCAG(lineRadius, 10);
  all_lines.push(line_14);
  line_15 = new CSG.Path2D([[1483.0807439392654, -2652.894194677278]], false);
  line_15 = line_15.appendBezier([[1464.383484322524, -2645.485846527248], [1442.8639968391046, -2605.974656393757], [1442.8639968391046, -2579.1634916603166]]);
  line_15 = line_15.appendBezier([[1442.8639968391046, -2563.288459910253], [1454.1529083058165, -2548.118985126859], [1482.375186972596, -2526.246719160105]]);
  line_15 = line_15.appendBezier([[1525.7669404227695, -2492.0272062766344], [1542.7003076228373, -2465.9215985098635], [1567.0420229729348, -2395.7186803262493]]);
  line_15 = line_15.appendBezier([[1583.269833206333, -2348.7991420427284], [1589.2670674230235, -2337.5102305760165], [1608.6698840064346, -2320.224084892614]]);
  line_15 = line_15.appendBezier([[1626.3088081731717, -2303.996274659216], [1640.0671690232268, -2301.5268252758724], [1689.456156690091, -2306.465724042559]]);
  line_15 = line_15.appendBezier([[1725.439561990235, -2309.9935088759066], [1731.084017723591, -2311.404622809245], [1738.8451443569552, -2319.5185279259445]]);
  line_15 = line_15.appendBezier([[1747.3118279569892, -2327.9852115259782], [1748.0173849236585, -2330.8074393926563], [1747.6646064403237, -2359.3824965427707]]);
  line_15 = line_15.appendBezier([[1747.3118279569892, -2411.240933592978], [1723.3228910902264, -2475.4466175599014], [1687.6922642734173, -2519.5439279767447]]);
  line_15 = line_15.appendBezier([[1667.583890723337, -2544.2384218101765], [1609.375440973104, -2597.8607512770577], [1571.6281432562864, -2626.435808427172]]);
  line_15 = line_15.appendBezier([[1538.4669658228204, -2651.483080743939], [1504.24745293935, -2661.7136567606467], [1483.0807439392654, -2652.894194677278]]);
  line_15 = line_15.expandToCAG(lineRadius, 10);
  all_lines.push(line_15);
  line_16 = new CSG.Path2D([[1076.6799311376399, -2460.6299212598424]], false);
  line_16 = line_16.appendBezier([[1062.2160133209154, -2454.2799085598167], [1054.8076651708857, -2437.6993198430837], [1054.8076651708857, -2410.535376626309]]);
  line_16 = line_16.appendBezier([[1054.8076651708857, -2380.90198402619], [1060.0993424209069, -2366.085287726131], [1081.971608387661, -2334.335224226004]]);
  line_16 = line_16.appendBezier([[1117.9550136878051, -2281.4184517257922], [1139.4745011712243, -2232.7350210255972], [1157.1134253379616, -2162.1793243586485]]);
  line_16 = line_16.appendBezier([[1163.1106595546523, -2138.5431659752207], [1171.2245646713513, -2113.495893658454], [1174.752349504699, -2106.0875455084242]]);
  line_16 = line_16.appendBezier([[1192.391273671436, -2071.868032624954], [1252.0108373550079, -2073.9847035249622], [1279.8803375384527, -2109.9681088251064]]);
  line_16 = line_16.appendBezier([[1300.341489571868, -2136.073716591877], [1306.3387237885586, -2195.693280275449], [1293.6386983885077, -2243.6711540089746]]);
  line_16 = line_16.appendBezier([[1275.9997742217706, -2309.287951909237], [1222.3774447548894, -2387.60477520955], [1164.1689950046566, -2432.4076425930625]]);
  line_16 = line_16.appendBezier([[1126.421697287839, -2461.335478226512], [1098.552197104394, -2470.507718793215], [1076.6799311376399, -2460.6299212598424]]);
  line_16 = line_16.expandToCAG(lineRadius, 10);
  all_lines.push(line_16);
  return linear_extrude({
    height: 5
  }, util.scale_to(union(all_lines), 100, 100)).center('x', 'y').rotateZ(180);
};

global.main = function(params) {
  var cat_lines;
  cat_lines = exports.get_cat_lines();
  return [cat_lines, cube().translate([20, 0, 10]), cube().translate([0, 20, 10])];
};


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./util.coffee":2}],2:[function(require,module,exports){
// title      : util
// author     : Juan F. Mosquera (juanfmx2@gmail.com)
// license    : GNU GENERAL PUBLIC LICENSE v3
// tags       : util
// file       : util.coffee
var _;

_ = require('underscore');

exports.create_extruded_regular_polygon = function(r, h, s) {
  return linear_extrude({
    height: h
  }, circle({
    r: r,
    fn: s,
    center: true
  }));
};

exports.create_extruded_text = function(text, text_height, line_width, z_h) {
  var extruded_lines, joined_text, scale_factor, text_dimensions, text_lines;
  text_lines = vector_text(0, 0, text);
  extruded_lines = [];
  text_lines.forEach(function(pl) {
    return extruded_lines.push(rectangular_extrude(pl, {
      w: line_width,
      h: z_h
    }));
  });
  joined_text = union(extruded_lines);
  text_dimensions = exports.get_object_dimensions(joined_text);
  scale_factor = text_height / text_dimensions.y;
  return scale([scale_factor, scale_factor, 1], joined_text);
};

exports.get_object_dimensions = function(geom_obj) {
  var bounds, dimensions;
  if (geom_obj.getBounds != null) {
    bounds = geom_obj.getBounds();
    if (bounds.length !== 2) {
      throw 'Why more than 2 points?';
    }
    dimensions = {};
    if (bounds[0].x != null) {
      dimensions.x = bounds[1].x - bounds[0].x;
    }
    if (bounds[0].y != null) {
      dimensions.y = bounds[1].y - bounds[0].y;
    }
    if (bounds[0].z != null) {
      dimensions.z = bounds[1].z - bounds[0].z;
    }
    return dimensions;
  } else {
    throw 'Does not have bounds!';
  }
};

exports.scale_to = function(geom_obj, desired_x, desired_y, desired_z) {
  var geom_dims, x_factor, xy_only, y_factor, z_factor;
  geom_dims = exports.get_object_dimensions(geom_obj);
  xy_only = desired_z == null;
  x_factor = desired_x / geom_dims.x;
  y_factor = desired_y / geom_dims.y;
  if (!xy_only) {
    z_factor = desired_z / geom_dims.z;
    return geom_obj.scale([x_factor, y_factor, z_factor]);
  }
  return geom_obj.scale([x_factor, y_factor]);
};


},{"underscore":3}],3:[function(require,module,exports){
(function (global){
//     Underscore.js 1.9.1
//     http://underscorejs.org
//     (c) 2009-2018 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` (`self`) in the browser, `global`
  // on the server, or `this` in some virtual machines. We use `self`
  // instead of `window` for `WebWorker` support.
  var root = typeof self == 'object' && self.self === self && self ||
            typeof global == 'object' && global.global === global && global ||
            this ||
            {};

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype;
  var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;

  // Create quick reference variables for speed access to core prototypes.
  var push = ArrayProto.push,
      slice = ArrayProto.slice,
      toString = ObjProto.toString,
      hasOwnProperty = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var nativeIsArray = Array.isArray,
      nativeKeys = Object.keys,
      nativeCreate = Object.create;

  // Naked function reference for surrogate-prototype-swapping.
  var Ctor = function(){};

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for their old module API. If we're in
  // the browser, add `_` as a global object.
  // (`nodeType` is checked to ensure that `module`
  // and `exports` are not HTML elements.)
  if (typeof exports != 'undefined' && !exports.nodeType) {
    if (typeof module != 'undefined' && !module.nodeType && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.9.1';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var optimizeCb = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      // The 2-argument case is omitted because we’re not using it.
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  var builtinIteratee;

  // An internal function to generate callbacks that can be applied to each
  // element in a collection, returning the desired result — either `identity`,
  // an arbitrary callback, a property matcher, or a property accessor.
  var cb = function(value, context, argCount) {
    if (_.iteratee !== builtinIteratee) return _.iteratee(value, context);
    if (value == null) return _.identity;
    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
    if (_.isObject(value) && !_.isArray(value)) return _.matcher(value);
    return _.property(value);
  };

  // External wrapper for our callback generator. Users may customize
  // `_.iteratee` if they want additional predicate/iteratee shorthand styles.
  // This abstraction hides the internal-only argCount argument.
  _.iteratee = builtinIteratee = function(value, context) {
    return cb(value, context, Infinity);
  };

  // Some functions take a variable number of arguments, or a few expected
  // arguments at the beginning and then a variable number of values to operate
  // on. This helper accumulates all remaining arguments past the function’s
  // argument length (or an explicit `startIndex`), into an array that becomes
  // the last argument. Similar to ES6’s "rest parameter".
  var restArguments = function(func, startIndex) {
    startIndex = startIndex == null ? func.length - 1 : +startIndex;
    return function() {
      var length = Math.max(arguments.length - startIndex, 0),
          rest = Array(length),
          index = 0;
      for (; index < length; index++) {
        rest[index] = arguments[index + startIndex];
      }
      switch (startIndex) {
        case 0: return func.call(this, rest);
        case 1: return func.call(this, arguments[0], rest);
        case 2: return func.call(this, arguments[0], arguments[1], rest);
      }
      var args = Array(startIndex + 1);
      for (index = 0; index < startIndex; index++) {
        args[index] = arguments[index];
      }
      args[startIndex] = rest;
      return func.apply(this, args);
    };
  };

  // An internal function for creating a new object that inherits from another.
  var baseCreate = function(prototype) {
    if (!_.isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  };

  var shallowProperty = function(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  };

  var has = function(obj, path) {
    return obj != null && hasOwnProperty.call(obj, path);
  }

  var deepGet = function(obj, path) {
    var length = path.length;
    for (var i = 0; i < length; i++) {
      if (obj == null) return void 0;
      obj = obj[path[i]];
    }
    return length ? obj : void 0;
  };

  // Helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object.
  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
  var getLength = shallowProperty('length');
  var isArrayLike = function(collection) {
    var length = getLength(collection);
    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Create a reducing function iterating left or right.
  var createReduce = function(dir) {
    // Wrap code that reassigns argument variables in a separate function than
    // the one that accesses `arguments.length` to avoid a perf hit. (#1991)
    var reducer = function(obj, iteratee, memo, initial) {
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          index = dir > 0 ? 0 : length - 1;
      if (!initial) {
        memo = obj[keys ? keys[index] : index];
        index += dir;
      }
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = keys ? keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }
      return memo;
    };

    return function(obj, iteratee, memo, context) {
      var initial = arguments.length >= 3;
      return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);
    };
  };

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = createReduce(-1);

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var keyFinder = isArrayLike(obj) ? _.findIndex : _.findKey;
    var key = keyFinder(obj, predicate, context);
    if (key !== void 0 && key !== -1) return obj[key];
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(cb(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given item (using `===`).
  // Aliased as `includes` and `include`.
  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
    if (!isArrayLike(obj)) obj = _.values(obj);
    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
    return _.indexOf(obj, item, fromIndex) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = restArguments(function(obj, path, args) {
    var contextPath, func;
    if (_.isFunction(path)) {
      func = path;
    } else if (_.isArray(path)) {
      contextPath = path.slice(0, -1);
      path = path[path.length - 1];
    }
    return _.map(obj, function(context) {
      var method = func;
      if (!method) {
        if (contextPath && contextPath.length) {
          context = deepGet(context, contextPath);
        }
        if (context == null) return void 0;
        method = context[path];
      }
      return method == null ? method : method.apply(context, args);
    });
  });

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matcher(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matcher(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value != null && value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(v, index, list) {
        computed = iteratee(v, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = v;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value != null && value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(v, index, list) {
        computed = iteratee(v, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = v;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection.
  _.shuffle = function(obj) {
    return _.sample(obj, Infinity);
  };

  // Sample **n** random values from a collection using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    var sample = isArrayLike(obj) ? _.clone(obj) : _.values(obj);
    var length = getLength(sample);
    n = Math.max(Math.min(n, length), 0);
    var last = length - 1;
    for (var index = 0; index < n; index++) {
      var rand = _.random(index, last);
      var temp = sample[index];
      sample[index] = sample[rand];
      sample[rand] = temp;
    }
    return sample.slice(0, n);
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    var index = 0;
    iteratee = cb(iteratee, context);
    return _.pluck(_.map(obj, function(value, key, list) {
      return {
        value: value,
        index: index++,
        criteria: iteratee(value, key, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior, partition) {
    return function(obj, iteratee, context) {
      var result = partition ? [[], []] : {};
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (has(result, key)) result[key]++; else result[key] = 1;
  });

  var reStrSymbol = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;
  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (_.isString(obj)) {
      // Keep surrogate pair characters together
      return obj.match(reStrSymbol);
    }
    if (isArrayLike(obj)) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = group(function(result, value, pass) {
    result[pass ? 0 : 1].push(value);
  }, true);

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null || array.length < 1) return n == null ? void 0 : [];
    if (n == null || guard) return array[0];
    return _.initial(array, array.length - n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  _.last = function(array, n, guard) {
    if (array == null || array.length < 1) return n == null ? void 0 : [];
    if (n == null || guard) return array[array.length - 1];
    return _.rest(array, Math.max(0, array.length - n));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, Boolean);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, output) {
    output = output || [];
    var idx = output.length;
    for (var i = 0, length = getLength(input); i < length; i++) {
      var value = input[i];
      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
        // Flatten current level of array or arguments object.
        if (shallow) {
          var j = 0, len = value.length;
          while (j < len) output[idx++] = value[j++];
        } else {
          flatten(value, shallow, strict, output);
          idx = output.length;
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = restArguments(function(array, otherArrays) {
    return _.difference(array, otherArrays);
  });

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // The faster algorithm will not work with an iteratee if the iteratee
  // is not a one-to-one function, so providing an iteratee will disable
  // the faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = getLength(array); i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;
      if (isSorted && !iteratee) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!_.contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!_.contains(result, value)) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = restArguments(function(arrays) {
    return _.uniq(flatten(arrays, true, true));
  });

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = getLength(array); i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      var j;
      for (j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = restArguments(function(array, rest) {
    rest = flatten(rest, true, true);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  });

  // Complement of _.zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices.
  _.unzip = function(array) {
    var length = array && _.max(array, getLength).length || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = _.pluck(array, index);
    }
    return result;
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = restArguments(_.unzip);

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values. Passing by pairs is the reverse of _.pairs.
  _.object = function(list, values) {
    var result = {};
    for (var i = 0, length = getLength(list); i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Generator function to create the findIndex and findLastIndex functions.
  var createPredicateIndexFinder = function(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = getLength(array);
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
      return -1;
    };
  };

  // Returns the first index on an array-like that passes a predicate test.
  _.findIndex = createPredicateIndexFinder(1);
  _.findLastIndex = createPredicateIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = getLength(array);
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Generator function to create the indexOf and lastIndexOf functions.
  var createIndexFinder = function(dir, predicateFind, sortedIndex) {
    return function(array, item, idx) {
      var i = 0, length = getLength(array);
      if (typeof idx == 'number') {
        if (dir > 0) {
          i = idx >= 0 ? idx : Math.max(idx + length, i);
        } else {
          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
        }
      } else if (sortedIndex && idx && length) {
        idx = sortedIndex(array, item);
        return array[idx] === item ? idx : -1;
      }
      if (item !== item) {
        idx = predicateFind(slice.call(array, i, length), _.isNaN);
        return idx >= 0 ? idx + i : -1;
      }
      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
        if (array[idx] === item) return idx;
      }
      return -1;
    };
  };

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (stop == null) {
      stop = start || 0;
      start = 0;
    }
    if (!step) {
      step = stop < start ? -1 : 1;
    }

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Chunk a single array into multiple arrays, each containing `count` or fewer
  // items.
  _.chunk = function(array, count) {
    if (count == null || count < 1) return [];
    var result = [];
    var i = 0, length = array.length;
    while (i < length) {
      result.push(slice.call(array, i, i += count));
    }
    return result;
  };

  // Function (ahem) Functions
  // ------------------

  // Determines whether to execute a function as a constructor
  // or a normal function with the provided arguments.
  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (_.isObject(result)) return result;
    return self;
  };

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = restArguments(function(func, context, args) {
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    var bound = restArguments(function(callArgs) {
      return executeBound(func, bound, context, this, args.concat(callArgs));
    });
    return bound;
  });

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder by default, allowing any combination of arguments to be
  // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.
  _.partial = restArguments(function(func, boundArgs) {
    var placeholder = _.partial.placeholder;
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  });

  _.partial.placeholder = _;

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = restArguments(function(obj, keys) {
    keys = flatten(keys, false, false);
    var index = keys.length;
    if (index < 1) throw new Error('bindAll must be passed function names');
    while (index--) {
      var key = keys[index];
      obj[key] = _.bind(obj[key], obj);
    }
  });

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = restArguments(function(func, wait, args) {
    return setTimeout(function() {
      return func.apply(null, args);
    }, wait);
  });

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = _.partial(_.delay, _, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var timeout, context, args, result;
    var previous = 0;
    if (!options) options = {};

    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };

    var throttled = function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };

    throttled.cancel = function() {
      clearTimeout(timeout);
      previous = 0;
      timeout = context = args = null;
    };

    return throttled;
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, result;

    var later = function(context, args) {
      timeout = null;
      if (args) result = func.apply(context, args);
    };

    var debounced = restArguments(function(args) {
      if (timeout) clearTimeout(timeout);
      if (immediate) {
        var callNow = !timeout;
        timeout = setTimeout(later, wait);
        if (callNow) result = func.apply(this, args);
      } else {
        timeout = _.delay(later, wait, this, args);
      }

      return result;
    });

    debounced.cancel = function() {
      clearTimeout(timeout);
      timeout = null;
    };

    return debounced;
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed on and after the Nth call.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed up to (but not including) the Nth call.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      if (times <= 1) func = null;
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  _.restArguments = restArguments;

  // Object Functions
  // ----------------

  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
    'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  var collectNonEnumProps = function(obj, keys) {
    var nonEnumIdx = nonEnumerableProps.length;
    var constructor = obj.constructor;
    var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;

    // Constructor is a special case.
    var prop = 'constructor';
    if (has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

    while (nonEnumIdx--) {
      prop = nonEnumerableProps[nonEnumIdx];
      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
        keys.push(prop);
      }
    }
  };

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`.
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (has(obj, key)) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve all the property names of an object.
  _.allKeys = function(obj) {
    if (!_.isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Returns the results of applying the iteratee to each element of the object.
  // In contrast to _.map it returns an object.
  _.mapObject = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = _.keys(obj),
        length = keys.length,
        results = {};
    for (var index = 0; index < length; index++) {
      var currentKey = keys[index];
      results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Convert an object into a list of `[key, value]` pairs.
  // The opposite of _.object.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`.
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // An internal function for creating assigner functions.
  var createAssigner = function(keysFunc, defaults) {
    return function(obj) {
      var length = arguments.length;
      if (defaults) obj = Object(obj);
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!defaults || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = createAssigner(_.allKeys);

  // Assigns a given object with all the own properties in the passed-in object(s).
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  _.extendOwn = _.assign = createAssigner(_.keys);

  // Returns the first key on an object that passes a predicate test.
  _.findKey = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = _.keys(obj), key;
    for (var i = 0, length = keys.length; i < length; i++) {
      key = keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  };

  // Internal pick helper function to determine if `obj` has key `key`.
  var keyInObj = function(value, key, obj) {
    return key in obj;
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = restArguments(function(obj, keys) {
    var result = {}, iteratee = keys[0];
    if (obj == null) return result;
    if (_.isFunction(iteratee)) {
      if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);
      keys = _.allKeys(obj);
    } else {
      iteratee = keyInObj;
      keys = flatten(keys, false, false);
      obj = Object(obj);
    }
    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
    return result;
  });

  // Return a copy of the object without the blacklisted properties.
  _.omit = restArguments(function(obj, keys) {
    var iteratee = keys[0], context;
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
      if (keys.length > 1) context = keys[1];
    } else {
      keys = _.map(flatten(keys, false, false), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  });

  // Fill in a given object with default properties.
  _.defaults = createAssigner(_.allKeys, true);

  // Creates an object that inherits from the given prototype object.
  // If additional properties are provided then they will be added to the
  // created object.
  _.create = function(prototype, props) {
    var result = baseCreate(prototype);
    if (props) _.extendOwn(result, props);
    return result;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Returns whether an object has a given set of `key:value` pairs.
  _.isMatch = function(object, attrs) {
    var keys = _.keys(attrs), length = keys.length;
    if (object == null) return !length;
    var obj = Object(object);
    for (var i = 0; i < length; i++) {
      var key = keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }
    return true;
  };


  // Internal recursive comparison function for `isEqual`.
  var eq, deepEq;
  eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // `null` or `undefined` only equal to itself (strict comparison).
    if (a == null || b == null) return false;
    // `NaN`s are equivalent, but non-reflexive.
    if (a !== a) return b !== b;
    // Exhaust primitive checks
    var type = typeof a;
    if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;
    return deepEq(a, b, aStack, bStack);
  };

  // Internal recursive comparison function for `isEqual`.
  deepEq = function(a, b, aStack, bStack) {
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN.
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
      case '[object Symbol]':
        return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);
    }

    var areArrays = className === '[object Array]';
    if (!areArrays) {
      if (typeof a != 'object' || typeof b != 'object') return false;

      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                               _.isFunction(bCtor) && bCtor instanceof bCtor)
                          && ('constructor' in a && 'constructor' in b)) {
        return false;
      }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }

    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);

    // Recursively compare objects and arrays.
    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false;
      // Deep compare the contents, ignoring non-numeric properties.
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      length = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      if (_.keys(b).length !== length) return false;
      while (length--) {
        // Deep compare each member
        key = keys[length];
        if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
    return _.keys(obj).length === 0;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError, isMap, isWeakMap, isSet, isWeakSet.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error', 'Symbol', 'Map', 'WeakMap', 'Set', 'WeakSet'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
  // IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).
  var nodelist = root.document && root.document.childNodes;
  if (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return !_.isSymbol(obj) && isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`?
  _.isNaN = function(obj) {
    return _.isNumber(obj) && isNaN(obj);
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, path) {
    if (!_.isArray(path)) {
      return has(obj, path);
    }
    var length = path.length;
    for (var i = 0; i < length; i++) {
      var key = path[i];
      if (obj == null || !hasOwnProperty.call(obj, key)) {
        return false;
      }
      obj = obj[key];
    }
    return !!length;
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  // Predicate-generating functions. Often useful outside of Underscore.
  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  // Creates a function that, when passed an object, will traverse that object’s
  // properties down the given `path`, specified as an array of keys or indexes.
  _.property = function(path) {
    if (!_.isArray(path)) {
      return shallowProperty(path);
    }
    return function(obj) {
      return deepGet(obj, path);
    };
  };

  // Generates a function for a given object that returns a given property.
  _.propertyOf = function(obj) {
    if (obj == null) {
      return function(){};
    }
    return function(path) {
      return !_.isArray(path) ? obj[path] : deepGet(obj, path);
    };
  };

  // Returns a predicate for checking whether an object has a given set of
  // `key:value` pairs.
  _.matcher = _.matches = function(attrs) {
    attrs = _.extendOwn({}, attrs);
    return function(obj) {
      return _.isMatch(obj, attrs);
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

  // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped.
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // Traverses the children of `obj` along `path`. If a child is a function, it
  // is invoked with its parent as context. Returns the value of the final
  // child, or `fallback` if any child is undefined.
  _.result = function(obj, path, fallback) {
    if (!_.isArray(path)) path = [path];
    var length = path.length;
    if (!length) {
      return _.isFunction(fallback) ? fallback.call(obj) : fallback;
    }
    for (var i = 0; i < length; i++) {
      var prop = obj == null ? void 0 : obj[path[i]];
      if (prop === void 0) {
        prop = fallback;
        i = length; // Ensure we don't continue iterating.
      }
      obj = _.isFunction(prop) ? prop.call(obj) : prop;
    }
    return obj;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate: /<%([\s\S]+?)%>/g,
    interpolate: /<%=([\s\S]+?)%>/g,
    escape: /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'": "'",
    '\\': '\\',
    '\r': 'r',
    '\n': 'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offset.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    var render;
    try {
      render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var chainResult = function(instance, obj) {
    return instance._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return chainResult(this, func.apply(_, args));
      };
    });
    return _;
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return chainResult(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return chainResult(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // Provide unwrapping proxy for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

  _.prototype.toString = function() {
    return String(this._wrapped);
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define == 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}());

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}]},{},[1]);
